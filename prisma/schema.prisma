// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


enum userRole {
  MANAGER
  STUDENT
}

model user {
  id            String   @id @map("_id") 
  name          String
  email         String  
  emailVerified Boolean
  image         String?
  username       String?
  phoneNumber    String?
  fatherName     String?
  fatherNumber   String?
  guardianName   String?
  guardianNumber String?
  currentAddress String?
  homeAddress    String?
  role           userRole @default(STUDENT) // "student" | "manager"
  payments       Payment[]
  bills          Bill[]

  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("users")
}

model Session {
  id        String   @id  @map("_id") 
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String  
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String  @id  @map("_id") 
  accountId             String
  providerId            String
  userId                String   
  user                  user      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id  @map("_id") 
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}


model Dish {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  price       Float
  available   Boolean // true = dish is ready for today
  createdAt   DateTime @default(now())

  BillItem BillItem[]
}

model Bill {
  id     String     @id @default(auto()) @map("_id") @db.ObjectId
  userId String     
  user   user       @relation(fields: [userId], references: [id])
  date   DateTime   @default(now())
  items  BillItem[]
  total  Float
  paid   Boolean    @default(false)
}

model BillItem {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  billId   String @db.ObjectId
  bill     Bill   @relation(fields: [billId], references: [id])
  dishId   String @db.ObjectId
  dish     Dish   @relation(fields: [dishId], references: [id])
  quantity Int
  price    Float
}

model Payment {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  userId  String   
  user    user     @relation(fields: [userId], references: [id])
  amount  Float
  paidAt  DateTime @default(now())
  billIds String[] // list of Bill ids paid with this payment
}
